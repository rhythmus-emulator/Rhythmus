#include "SelectScene.h"
#include "Event.h"
#include "SceneManager.h"
#include "Song.h"

namespace rhythmus
{


// -------------------------- class SelectScene

SelectScene::SelectScene()
{
  set_name("SelectScene");
  next_scene_mode_ = GameSceneMode::kGameSceneModeDecide;
}

void SelectScene::LoadScene()
{
  // Before starting, unload song.
  SongPlayable::getInstance().CancelLoad();
  SongPlayable::getInstance().Clear();

  // Add wheel children first, as scene parameter may need it.
  // (e.g. LR2 command)
  AddChild(&wheel_);

  // Add select data
  MakeSelectDataList();

  // Here, wheel item is generated by Wheel::Load();
  Scene::LoadScene();

  // Send some initial events to invalidate specific object
  // (e.g. song title text object)
  EventManager::SendEvent(Events::kEventSongSelectChanged);
}

void SelectScene::StartScene()
{
  Scene::StartScene();

  // TODO
}

void SelectScene::CloseScene()
{
  Scene::CloseScene();

  // TODO
}

bool SelectScene::ProcessEvent(const EventMessage& e)
{
  if (e.IsKeyUp() && e.GetKeycode() == GLFW_KEY_ESCAPE)
  {
    next_scene_mode_ = GameSceneMode::kGameSceneClose;
    CloseScene();
    return false;
  }

  if (!is_input_available())
    return true;

  if (e.IsKeyDown() || e.IsKeyPress())
  {
    if (e.GetKeycode() == GLFW_KEY_UP)
    {
      wheel_.NavigateUp();
      SongList::getInstance().select(wheel_.get_selected_data().index);
      EventManager::SendEvent(Events::kEventSongSelectChanged);
    }
    else if (e.GetKeycode() == GLFW_KEY_DOWN)
    {
      wheel_.NavigateDown();
      SongList::getInstance().select(wheel_.get_selected_data().index);
      EventManager::SendEvent(Events::kEventSongSelectChanged);
    }
  }

  if (e.IsKeyUp())
  {
    if (e.GetKeycode() == GLFW_KEY_ESCAPE)
    {
      Graphic::getInstance().ExitRendering();
    }
    else if (e.GetKeycode() == GLFW_KEY_ENTER)
    {
      // Trick: preload selected song from here
      // we can play song almost without loading time ...!
      auto &d = wheel_.get_selected_data();
      SongPlayable::getInstance().LoadAsync(d.songpath, d.chartname);

      // Song selection - immediately change scene mode
      CloseScene();
    }
  }

  return true;
}

void SelectScene::LoadProperty(const std::string& prop_name, const std::string& value)
{
  // Check and process for LR2 exclusive commands
  if (prop_name.compare(0, 9, "#DST_BAR_") == 0 ||
      prop_name.compare(0, 9, "#SRC_BAR_") == 0)
  {
    // change order: move wheel to end
    auto it = std::find(children_.begin(), children_.end(), &wheel_);
    ASSERT(it != children_.end());
    std::rotate(it, it + 1, children_.end());
    // set property
    wheel_.LoadProperty(prop_name, value);
    return;
  }
  else if (prop_name == "#BAR_CENTER")
  {
    wheel_.LoadProperty(prop_name, value);
    return;
  }

  Scene::LoadProperty(prop_name, value);
}

MusicWheel& SelectScene::get_wheel()
{
  return wheel_;
}

void SelectScene::MakeSelectDataList()
{
  int i = 0;
  for (auto &song : SongList::getInstance())
  {
    auto &item = *wheel_.NewData<MusicWheelData>();
    item.title = song.title;
    item.artist = song.artist;
    item.subtitle = song.subtitle;
    item.subartist = song.subartist;
    item.songpath = song.songpath;
    item.chartname = song.chartpath;
    item.type = 0;
    item.level = song.level;
    item.index = i++;
  }

  if (wheel_.size() == 0)
  {
    auto &item = *wheel_.NewData<MusicWheelData>();
    item.title = "(No Song)";
    item.index = -1;
  }
}

}