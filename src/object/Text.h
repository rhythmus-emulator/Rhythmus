#pragma once

#include "Font.h"
#include "Util.h"

RHYTHMUS_NAMESPACE_BEGIN

enum TextAlignments
{
  kTextAlignLeft,
  kTextAlignRight,
  kTextAlignCenter,
  kTextAlignFitMaxsize,
  kTextAlignCenterFitMaxsize,
  kTextAlignRightFitMaxsize,
  kTextAlignStretch,
};

class Text : public BaseObject
{
public:
  Text();
  virtual ~Text();

  void SetFontByPath(const std::string& path);

  float GetTextWidth();
  void SetText(const std::string& s);
  void SetAlignment(TextAlignments align);
  void SetTextPosition(int position_attr);
  void SetLineBreaking(bool enable_line_break);
  void Clear();

protected:
  virtual void doRender();
  virtual void doUpdate(float);

private:
  // Font.
  Font *font_;

  // text to be rendered
  std::string text_;

  // text_rendering related context
  struct {
    // glyph vertex to be rendered (generated by textglyph)
    std::vector<TextVertexInfo> textvertex;

    // calculated text width / height
    float width, height;
  } text_render_ctx_;

  // text alignment(stretch) option
  TextAlignments text_alignment_;

  // text position option
  // 0 : normal / 1 : offset -50% of text width / 2 : offset -100% of text width
  // (LR2 legacy option)
  int text_position_;

  // additional font attributes, which is set internally by font_alignment_ option.
  struct {
    // scale x / y
    float sx, sy;
    // translation x / y
    float tx, ty;
  } alignment_attrs_;

  // is line-breaking enabled?
  bool do_line_breaking_;
};

class NumberText : public Text
{
public:
  NumberText();
  void SetNumber(int number);
  void SetNumber(double number);
  template <typename T> T GetNumber() const;
  void SetNumberChangeTime(float msec);

  /**
   * Set number format
   * e.g. %04d : show number always 4 digits
   *      %3d : show number at least 3 digits
   *      +%03d : show number always 3 digits with plus/minus sign always
   *      %03f : show number always 3 digits + decimal (if decimal exists)
   *      %02.2f : show number in form of 2 digits + 2 decimal always.
   *      %f : show number in full digits
   */
  void SetFormat(const std::string& number_format);

protected:
  virtual void doUpdate(float);

private:
  double number_;
  double disp_number_;
  float number_change_duration_;
  float number_change_remain_;
  bool need_update_;
  std::string number_format_;
};

RHYTHMUS_NAMESPACE_END